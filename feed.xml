<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-12-11T16:31:03+00:00</updated><id>/</id><title type="html">echo ‘fatal error’</title><subtitle>programación. colombia.</subtitle><entry><title type="html">615A - A. Bulbs [Codeforces]</title><link href="/615a-a-bulbs-codeforces" rel="alternate" type="text/html" title="615A - A. Bulbs [Codeforces]" /><published>2017-10-12T07:00:00+00:00</published><updated>2017-10-12T07:00:00+00:00</updated><id>/615a-a-bulbs-codeforces</id><content type="html" xml:base="/615a-a-bulbs-codeforces">&lt;p&gt;Vasya wants to turn on Christmas lights consisting of m bulbs. Initially, all bulbs are turned off. There are n buttons, each of them is connected to some set of bulbs. Vasya can press any of these buttons. When the button is pressed, it turns on all the bulbs it’s connected to. Can Vasya light up all the bulbs?&lt;/p&gt;

&lt;p&gt;If Vasya presses the button such that some bulbs connected to it are already turned on, they do not change their state, i.e. remain turned on.&lt;/p&gt;

&lt;h3 id=&quot;input&quot;&gt;Input&lt;/h3&gt;
&lt;p&gt;The first line of the input contains integers n and m (1 ≤ n, m ≤ 100) — the number of buttons and the number of bulbs respectively.&lt;/p&gt;

&lt;p&gt;Each of the next n lines contains xi (0 ≤ xi ≤ m) — the number of bulbs that are turned on by the i-th button, and then xi numbers yij (1 ≤ yij ≤ m) — the numbers of these bulbs.&lt;/p&gt;

&lt;h3 id=&quot;output&quot;&gt;Output&lt;/h3&gt;
&lt;p&gt;If it’s possible to turn on all m bulbs print “YES”, otherwise print “NO”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
# input
3 4
2 1 4
3 1 3 1
1 2

# output
YES

---

# input
3 3
1 1
1 2
1 1

# output
NO
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;solución&quot;&gt;Solución&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;c++&quot;&gt;
/**
    Codeforces | 615A
    A. Bulbs
    @author krthr
*/

#include &amp;lt;bits/stdc++.h&amp;gt;
using namespace std;

int main() {
    int n, m, x, j;
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    bool b[m];

    for (int i = 0; i &amp;lt; m; i++) b[i] = false;

    for (int i = 0; i &amp;lt; n; i++) {
        cin &amp;gt;&amp;gt; x;
        while (x--) {
            cin &amp;gt;&amp;gt; j;
            b[j - 1] = true;
        }
    }

    for (bool t : b) {
        if (!t) {
            cout &amp;lt;&amp;lt; &quot;NO&quot; &amp;lt;&amp;lt; endl; return 0;
        }
    }

    cout &amp;lt;&amp;lt; &quot;YES&quot; &amp;lt;&amp;lt; endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</content><author><name>Karther Rupnik</name></author><category term="maratones" /><category term="c++" /><summary type="html">Vasya wants to turn on Christmas lights consisting of m bulbs. Initially, all bulbs are turned off. There are n buttons, each of them is connected to some set of bulbs. Vasya can press any of these buttons. When the button is pressed, it turns on all the bulbs it’s connected to. Can Vasya light up all the bulbs?</summary></entry><entry><title type="html">Una aproximación al patrón MVC en Java (usando Netbeans)</title><link href="/mvc-en-java-netbeans" rel="alternate" type="text/html" title="Una aproximación al patrón MVC en Java (usando Netbeans)" /><published>2017-09-09T10:00:00+00:00</published><updated>2017-09-09T10:00:00+00:00</updated><id>/mvc-en-java-netbeans</id><content type="html" xml:base="/mvc-en-java-netbeans">&lt;p&gt;MVC es un patrón de desarrollo que seguramente conoces. La idea detrás de él es dividir el código en tres elementos importantes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Modelos:&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vistas:&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Controladores:&lt;/strong&gt; Código encargado de la &lt;em&gt;lógica&lt;/em&gt; de la aplicación.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;proyecto&quot;&gt;Proyecto&lt;/h2&gt;

&lt;h2 id=&quot;estructura-del-proyecto&quot;&gt;Estructura del proyecto&lt;/h2&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;</content><author><name>Karther Rupnik</name></author><category term="tutorial" /><category term="java" /><summary type="html">MVC es un patrón de desarrollo que seguramente conoces. La idea detrás de él es dividir el código en tres elementos importantes: Modelos: Vistas: Controladores: Código encargado de la lógica de la aplicación.</summary></entry><entry><title type="html">339A – A. Helpful Maths [Codeforces]</title><link href="/339-a-helpful-maths-codeforces" rel="alternate" type="text/html" title="339A – A. Helpful Maths [Codeforces]" /><published>2017-09-09T10:00:00+00:00</published><updated>2017-09-09T10:00:00+00:00</updated><id>/339-a-helpful-maths-codeforces</id><content type="html" xml:base="/339-a-helpful-maths-codeforces">&lt;p&gt;Xenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.&lt;/p&gt;
&lt;p&gt;The teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2 and 3. Still, that isn’t enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can’t calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+3.&lt;/p&gt;
&lt;p&gt;You’ve got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.&lt;/p&gt;

&lt;h3&gt;Input&lt;/h3&gt;
&lt;p&gt;The first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters “+“. Besides, string s is a correct sum of numbers 1, 2 and 3. String s is at most 100 characters long.&lt;/p&gt;
&lt;h3&gt;Output&lt;/h3&gt;
&lt;p&gt;Print the new sum that Xenia can count.&lt;/p&gt;

&lt;h3&gt;Ejemplos&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
# input:    3+2+1
# output:   1+2+3
---
# input:    1+1+3+1+3
# output:   1+1+1+3+3
---
# input:    2
# output:   2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Solución&lt;/h2&gt;
&lt;p&gt;La solución a este problema es sencilla. Almacenaremos los números que nos dan en el input en un vector. Luego ordenaremos
    el vector y finalmente lo mostramos. El método que uso para ordenar el vector es: *HeapSort*.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;c++&quot;&gt;
    /**
        Codeforces | 339A
        A. Helpful Maths
        @author krthr
    */
    #include &lt;bits/stdc++.h&gt;
    using namespace std;
    
    void heapify(int arr[], int n, int i) {
        int largest = i;
        int l = 2*i + 1;
        int r = 2*i + 2;
    
        if (l &lt; n &amp;&amp; arr[l] &gt; arr[largest]) largest = l;
        if (r &lt; n &amp;&amp; arr[r] &gt; arr[largest]) largest = r;
    
        if (largest != i) {
            swap(arr[i], arr[largest]);
            heapify(arr, n, largest);
        }
    }
    
    void heapSort(int arr[], int n) {
        for (int i = n / 2 - 1; i &gt;= 0; i--)
            heapify(arr, n, i);
    
        for (int i=n-1; i&gt;=0; i--) {
            swap(arr[0], arr[i]);
    
            heapify(arr, i, 0);
        }
    }
    
    int main() {
        int n[100], j = 0;
        string s;
        getline(cin, s);
    
        for (int i = 0; i &lt; s.length(); i++) {
            if (s[i] == '+') continue;
            else {
                n[j] = s[i] - '0';  j++;
            }
        }
    
        heapSort(n, j);
    
        for (int i = 0; i &lt; j; i++) {
            if (i &lt; j - 1) cout &lt;&lt; n[i] &lt;&lt; &quot;+&quot;;
            else cout &lt;&lt; n[i];
        }
    
        return 0;
    }
&lt;/code&gt;&lt;/pre&gt;</content><author><name>Karther Rupnik</name></author><category term="maratones" /><category term="c++" /><summary type="html">Xenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation. The teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2 and 3. Still, that isn’t enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can’t calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+3. You’ve got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.</summary></entry></feed>