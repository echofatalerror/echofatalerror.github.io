<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-12-11T02:59:57+00:00</updated><id>/</id><title type="html">echo ‘fatal error’</title><subtitle>programación. colombia.</subtitle><entry><title type="html">615A - A. Bulbs [Codeforces]</title><link href="/615a-a-bulbs-codeforces" rel="alternate" type="text/html" title="615A - A. Bulbs [Codeforces]" /><published>2017-10-12T07:00:00+00:00</published><updated>2017-10-12T07:00:00+00:00</updated><id>/615a-a-bulbs-codeforces</id><content type="html" xml:base="/615a-a-bulbs-codeforces">&lt;h2 id=&quot;problema&quot;&gt;Problema&lt;/h2&gt;
&lt;p&gt;Vasya wants to turn on Christmas lights consisting of m bulbs. Initially, all bulbs are turned off. There are n buttons, each of them is connected to some set of bulbs. Vasya can press any of these buttons. When the button is pressed, it turns on all the bulbs it’s connected to. Can Vasya light up all the bulbs?&lt;/p&gt;

&lt;p&gt;If Vasya presses the button such that some bulbs connected to it are already turned on, they do not change their state, i.e. remain turned on.&lt;/p&gt;

&lt;h3 id=&quot;input&quot;&gt;Input&lt;/h3&gt;
&lt;p&gt;The first line of the input contains integers n and m (1 ≤ n, m ≤ 100) — the number of buttons and the number of bulbs respectively.&lt;/p&gt;

&lt;p&gt;Each of the next n lines contains xi (0 ≤ xi ≤ m) — the number of bulbs that are turned on by the i-th button, and then xi numbers yij (1 ≤ yij ≤ m) — the numbers of these bulbs.&lt;/p&gt;

&lt;h3 id=&quot;output&quot;&gt;Output&lt;/h3&gt;
&lt;p&gt;If it’s possible to turn on all m bulbs print “YES”, otherwise print “NO”.&lt;/p&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
# input
3 4
2 1 4
3 1 3 1
1 2

# output
YES

---

# input
3 3
1 1
1 2
1 1

# output
NO
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;solución&quot;&gt;Solución&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;c++&quot;&gt;
/**
    Codeforces | 615A
    A. Bulbs
    @author krthr
*/

#include &amp;lt;bits/stdc++.h&amp;gt;
using namespace std;

int main() {
    int n, m, x, j;
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    bool b[m];

    for (int i = 0; i &amp;lt; m; i++) b[i] = false;

    for (int i = 0; i &amp;lt; n; i++) {
        cin &amp;gt;&amp;gt; x;
        while (x--) {
            cin &amp;gt;&amp;gt; j;
            b[j - 1] = true;
        }
    }

    for (bool t : b) {
        if (!t) {
            cout &amp;lt;&amp;lt; &quot;NO&quot; &amp;lt;&amp;lt; endl; return 0;
        }
    }

    cout &amp;lt;&amp;lt; &quot;YES&quot; &amp;lt;&amp;lt; endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</content><author><name>Karther Rupnik</name></author><category term="maratones" /><category term="c++" /><summary type="html">Problema Vasya wants to turn on Christmas lights consisting of m bulbs. Initially, all bulbs are turned off. There are n buttons, each of them is connected to some set of bulbs. Vasya can press any of these buttons. When the button is pressed, it turns on all the bulbs it’s connected to. Can Vasya light up all the bulbs?</summary></entry><entry><title type="html">339A – A. Helpful Maths [Codeforces]</title><link href="/339-a-helpful-maths-codeforces" rel="alternate" type="text/html" title="339A – A. Helpful Maths [Codeforces]" /><published>2017-09-09T10:00:00+00:00</published><updated>2017-09-09T10:00:00+00:00</updated><id>/339-a-helpful-maths-codeforces</id><content type="html" xml:base="/339-a-helpful-maths-codeforces">&lt;h2&gt;Problema&lt;/h2&gt;
&lt;p&gt;Xenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.&lt;/p&gt;
&lt;p&gt;The teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2 and 3. Still, that isn’t enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can’t calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+3.&lt;/p&gt;
&lt;p&gt;You’ve got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.&lt;/p&gt;

&lt;h3&gt;Input&lt;/h3&gt;
&lt;p&gt;The first line contains a non-empty string s — the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters “+“. Besides, string s is a correct sum of numbers 1, 2 and 3. String s is at most 100 characters long.&lt;/p&gt;
&lt;h3&gt;Output&lt;/h3&gt;
&lt;p&gt;Print the new sum that Xenia can count.&lt;/p&gt;

&lt;h3&gt;Ejemplos&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
# input:    3+2+1
# output:   1+2+3
---
# input:    1+1+3+1+3
# output:   1+1+1+3+3
---
# input:    2
# output:   2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Solución&lt;/h2&gt;
&lt;p&gt;La solución a este problema es sencilla. Almacenaremos los números que nos dan en el input en un vector. Luego ordenaremos
    el vector y finalmente lo mostramos. El método que uso para ordenar el vector es: *HeapSort*.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;c++&quot;&gt;
    /**
        Codeforces | 339A
        A. Helpful Maths
        @author krthr
    */
    #include &lt;bits/stdc++.h&gt;
    using namespace std;
    
    void heapify(int arr[], int n, int i) {
        int largest = i;
        int l = 2*i + 1;
        int r = 2*i + 2;
    
        if (l &lt; n &amp;&amp; arr[l] &gt; arr[largest]) largest = l;
        if (r &lt; n &amp;&amp; arr[r] &gt; arr[largest]) largest = r;
    
        if (largest != i) {
            swap(arr[i], arr[largest]);
            heapify(arr, n, largest);
        }
    }
    
    void heapSort(int arr[], int n) {
        for (int i = n / 2 - 1; i &gt;= 0; i--)
            heapify(arr, n, i);
    
        for (int i=n-1; i&gt;=0; i--) {
            swap(arr[0], arr[i]);
    
            heapify(arr, i, 0);
        }
    }
    
    int main() {
        int n[100], j = 0;
        string s;
        getline(cin, s);
    
        for (int i = 0; i &lt; s.length(); i++) {
            if (s[i] == '+') continue;
            else {
                n[j] = s[i] - '0';  j++;
            }
        }
    
        heapSort(n, j);
    
        for (int i = 0; i &lt; j; i++) {
            if (i &lt; j - 1) cout &lt;&lt; n[i] &lt;&lt; &quot;+&quot;;
            else cout &lt;&lt; n[i];
        }
    
        return 0;
    }
&lt;/code&gt;&lt;/pre&gt;</content><author><name>Karther Rupnik</name></author><category term="maratones" /><category term="c++" /><summary type="html">Problema Xenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation. The teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2 and 3. Still, that isn’t enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can’t calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+3. You’ve got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.</summary></entry><entry><title type="html">Advanced Markdown tips</title><link href="/advanced-markdown" rel="alternate" type="text/html" title="Advanced Markdown tips" /><published>2017-07-27T05:00:00+00:00</published><updated>2017-07-27T05:00:00+00:00</updated><id>/advanced-markdown</id><content type="html" xml:base="/advanced-markdown">&lt;p&gt;There are lots of powerful things you can do with the Ghost editor&lt;/p&gt;
&lt;p&gt;If you've gotten pretty comfortable with &lt;a href=&quot;/the-editor/&quot;&gt;all the basics&lt;/a&gt; of writing in Ghost, then you may enjoy some more advanced tips about the types of things you can do with Markdown!&lt;/p&gt;
&lt;p&gt;As with the last post about the editor, you'll want to be actually editing this post as you read it so that you can see all the Markdown code we're using.&lt;/p&gt;
&lt;h2 id=&quot;specialformatting&quot;&gt;Special formatting&lt;/h2&gt;
&lt;p&gt;As well as bold and italics, you can also use some other special formatting in Markdown when the need arises, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;strike through&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;highlight&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;*escaped characters*&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;writingcodeblocks&quot;&gt;Writing code blocks&lt;/h2&gt;
&lt;p&gt;There are two types of code elements which can be inserted in Markdown, the first is inline, and the other is block. Inline code is formatted by wrapping any word or words in back-ticks, &lt;code&gt;like this&lt;/code&gt;. Larger snippets of code can be displayed across multiple lines using triple back ticks:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;.my-link {
    text-decoration: underline;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to get really fancy, you can even add syntax highlighting using &lt;a href=&quot;http://prismjs.com/&quot;&gt;Prism.js&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;fullbleedimages&quot;&gt;Full bleed images&lt;/h2&gt;
&lt;p&gt;One neat trick which you can use in Markdown to distinguish between different types of images is to add a &lt;code&gt;#hash&lt;/code&gt; value to the end of the source URL, and then target images containing the hash with special styling. For example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://casper.ghost.org/v1.0.0/images/walking.jpg#full&quot; alt=&quot;walking&quot;&gt;&lt;/p&gt;
&lt;p&gt;which is styled with...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;img[src$=&amp;quot;#full&amp;quot;] {
    max-width: 100vw;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates full-bleed images in the Casper theme, which stretch beyond their usual boundaries right up to the edge of the window. Every theme handles these types of things slightly differently, but it's a great trick to play with if you want to have a variety of image sizes and styles.&lt;/p&gt;
&lt;h2 id=&quot;referencelists&quot;&gt;Reference lists&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The quick brown &lt;a href=&quot;https://en.wikipedia.org/wiki/Fox&quot; title=&quot;Wikipedia: Fox&quot;&gt;fox&lt;/a&gt;, jumped over the lazy &lt;a href=&quot;https://en.wikipedia.org/wiki/Dog&quot; title=&quot;Wikipedia: Dog&quot;&gt;dog&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another way to insert links in markdown is using reference lists. You might want to use this style of linking to cite reference material in a Wikipedia-style. All of the links are listed at the end of the document, so you can maintain full separation between content and its source or reference.&lt;/p&gt;
&lt;h2 id=&quot;creatingfootnotes&quot;&gt;Creating footnotes&lt;/h2&gt;
&lt;p&gt;The quick brown fox&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; jumped over the lazy dog&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Footnotes are a great way to add additional contextual details when appropriate. Ghost will automatically add footnote content to the very end of your post.&lt;/p&gt;
&lt;h2 id=&quot;fullhtml&quot;&gt;Full HTML&lt;/h2&gt;
&lt;p&gt;Perhaps the best part of Markdown is that you're never limited to just Markdown. You can write HTML directly in the Ghost editor and it will just work as HTML usually does. No limits! Here's a standard YouTube embed code as an example:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Cniqsc9QfDo?rel=0&amp;amp;showinfo=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Foxes are red &lt;a href=&quot;#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Dogs are usually not red &lt;a href=&quot;#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ghost</name></author><category term="Getting started" /><summary type="html">There are lots of powerful things you can do with the Ghost editor If you've gotten pretty comfortable with all the basics of writing in Ghost, then you may enjoy some more advanced tips about the types of things you can do with Markdown! As with the last post about the editor, you'll want to be actually editing this post as you read it so that you can see all the Markdown code we're using. Special formatting As well as bold and italics, you can also use some other special formatting in Markdown when the need arises, for example: strike through highlight *escaped characters* Writing code blocks There are two types of code elements which can be inserted in Markdown, the first is inline, and the other is block. Inline code is formatted by wrapping any word or words in back-ticks, like this. Larger snippets of code can be displayed across multiple lines using triple back ticks: .my-link { text-decoration: underline; } If you want to get really fancy, you can even add syntax highlighting using Prism.js. Full bleed images One neat trick which you can use in Markdown to distinguish between different types of images is to add a #hash value to the end of the source URL, and then target images containing the hash with special styling. For example: which is styled with... img[src$=&amp;quot;#full&amp;quot;] { max-width: 100vw; } This creates full-bleed images in the Casper theme, which stretch beyond their usual boundaries right up to the edge of the window. Every theme handles these types of things slightly differently, but it's a great trick to play with if you want to have a variety of image sizes and styles. Reference lists The quick brown fox, jumped over the lazy dog. Another way to insert links in markdown is using reference lists. You might want to use this style of linking to cite reference material in a Wikipedia-style. All of the links are listed at the end of the document, so you can maintain full separation between content and its source or reference. Creating footnotes The quick brown fox[1] jumped over the lazy dog[2]. Footnotes are a great way to add additional contextual details when appropriate. Ghost will automatically add footnote content to the very end of your post. Full HTML Perhaps the best part of Markdown is that you're never limited to just Markdown. You can write HTML directly in the Ghost editor and it will just work as HTML usually does. No limits! Here's a standard YouTube embed code as an example: Foxes are red ↩︎ Dogs are usually not red ↩︎</summary></entry></feed>